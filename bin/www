#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('utop:server');
var http = require('http');
var request = require('request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var httpServer = http.createServer(app).listen(8001, function(req,res) {
  console.log('Socket IO server has been started');
});
// upgrade http server to socket.io server
var io = require('socket.io').listen(httpServer);

io.sockets.on('connection',function(socket){
  socket.emit('toclient',{msg:'Welcome !'});
  socket.on('fromclient',function(data){
    if (data.latitude && data.longitude) {
      query = '?latitude=' + data.latitude + '&longitude=' + data.longitude;

      request('http://localhost:8000/signal' + query, function (error, response, body) {
        if (!error && response.statusCode == 200) {
          var obj = eval("("+ body + ")");

          socket.broadcast.emit('toclient', obj); // 자신을 제외하고 다른 클라이언트에게 보냄
          socket.emit('toclient', obj); // 해당 클라이언트에게만 보냄. 다른 클라이언트에 보낼려면?
          console.log('Message from client :'+data.msg);
        }
      });
    } else {
      request('http://localhost:8000/send', function (error, response, body) {
        if (!error && response.statusCode == 200) {
          var obj = eval("("+ body + ")");
          console.log(obj);

          socket.broadcast.emit('toclient', obj); // 자신을 제외하고 다른 클라이언트에게 보냄
          socket.emit('toclient', obj); // 해당 클라이언트에게만 보냄. 다른 클라이언트에 보낼려면?
          console.log('Message from client :'+data.msg);
        }
      });
    }
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
